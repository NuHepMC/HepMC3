//
// File generated by /afs/cern.ch/sw/lcg/app/releases/ROOT/5.34.23/x86_64-slc6-gcc49-opt/root/bin/rootcint at Tue Nov 25 08:00:10 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME rootIO_Classes
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "rootIO_Classes.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      namespace HepMC {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HepMC::Setup Setup;
      #else
      class Setup  {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace HepMC {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HepMC::FourVector FourVector;
      #else
      class FourVector  {
         public:
         //friend XX;
         double v1; ///< px or x. Interpretation depends on accessors used
         double v2; ///< py or y. Interpretation depends on accessors used
         double v3; ///< pz or z. Interpretation depends on accessors used
         double v4; ///< e  or t. Interpretation depends on accessors used
      };
      #endif
      } 
      namespace HepMC {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HepMC::GenParticleData GenParticleData;
      #else
      class GenParticleData  {
         public:
         //friend XX;
         int pdg_id; ///< PDG ID
         int status; ///< Status
         int status_subcode; ///< Status subcode
         bool is_mass_set; ///< Check if generated mass is set
         double mass; ///< Generated mass (if set)
         ::HepMC::FourVector momentum; ///< Momentum
      };
      #endif
      } 
      namespace HepMC {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HepMC::GenVertexData GenVertexData;
      #else
      class GenVertexData  {
         public:
         //friend XX;
         ::HepMC::FourVector position; ///< Position in time-space
      };
      #endif
      } 
      namespace HepMC {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HepMC::Units Units;
      #else
      class Units  {
         public:
         //friend XX;
         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::HepMC::Units::MomentumUnit MomentumUnit;
         #else
         enum MomentumUnit  {
         };
         #endif

         #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
         typedef ::HepMC::Units::LengthUnit LengthUnit;
         #else
         enum LengthUnit  {
         };
         #endif

      };
      #endif
      } 
      namespace HepMC {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HepMC::GenPdfInfo GenPdfInfo;
      #else
      class GenPdfInfo  {
         public:
         //friend XX;
         int parton_id[2]; //
         int pdf_id[2]; //
         double scale; //
         double x[2]; //
         double xf[2]; //
      };
      #endif
      } 
      namespace HepMC {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HepMC::GenHeavyIon GenHeavyIon;
      #else
      class GenHeavyIon  {
         public:
         //friend XX;
         int Ncoll_hard; //
         int Npart_proj; //
         int Npart_targ; //
         int Ncoll; //
         int spectator_neutrons; //
         int spectator_protons; //
         int N_Nwounded_collisions; //
         int Nwounded_N_collisions; //
         int Nwounded_Nwounded_collisions; //
         float impact_parameter; //
         float event_plane_angle; //
         float eccentricity; //
         float sigma_inel_NN; //
      };
      #endif
      } 
      namespace HepMC {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HepMC::GenCrossSection GenCrossSection;
      #else
      class GenCrossSection  {
         public:
         //friend XX;
         double cross_section; ///< Generated cross-section
         double cross_section_error; ///< Generated cross-section error
      };
      #endif
      } 
      namespace HepMC {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::HepMC::GenEventData GenEventData;
      #else
      class GenEventData  {
         public:
         //friend XX;
         int event_number; ///< Event number
         ::HepMC::Units::MomentumUnit momentum_unit; ///< Momentum unit
         ::HepMC::Units::LengthUnit length_unit; ///< Length unit
         vector< GenParticleData > particles; ///< Particles
         vector< GenVertexData > vertices; ///< Vertices
         vector< int > links1; //
         vector< int > links2; ///< Second id of the vertex links
         ::HepMC::GenPdfInfo pdf_info; ///< PDF information
         ::HepMC::GenHeavyIon heavy_ion; ///< Heavy ion additional information
         ::HepMC::GenCrossSection cross_section; ///< Cross Section additional information
      };
      #endif
      } 
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void HepMCcLcLSetup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HepMCcLcLSetup_Dictionary();

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HepMC::Setup*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HepMC::Setup) == sizeof(::ROOT::Shadow::HepMC::Setup));
      ::HepMC::Setup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HepMC::Setup),0);
      static ::ROOT::TGenericClassInfo 
         instance("HepMC::Setup", "/afs/cern.ch/user/t/tprzedzi/HepMC3/include/HepMC/Setup.h", 24,
                  typeid(::HepMC::Setup), DefineBehavior(ptr, ptr),
                  &HepMCcLcLSetup_ShowMembers, &HepMCcLcLSetup_Dictionary, isa_proxy, 4,
                  sizeof(::HepMC::Setup) );
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HepMC::Setup*)
   {
      return GenerateInitInstanceLocal((::HepMC::Setup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HepMC::Setup*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HepMCcLcLSetup_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HepMC::Setup*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HepMCcLcLFourVector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HepMCcLcLFourVector_Dictionary();
   static void *new_HepMCcLcLFourVector(void *p = 0);
   static void *newArray_HepMCcLcLFourVector(Long_t size, void *p);
   static void delete_HepMCcLcLFourVector(void *p);
   static void deleteArray_HepMCcLcLFourVector(void *p);
   static void destruct_HepMCcLcLFourVector(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HepMC::FourVector*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HepMC::FourVector) == sizeof(::ROOT::Shadow::HepMC::FourVector));
      ::HepMC::FourVector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HepMC::FourVector),0);
      static ::ROOT::TGenericClassInfo 
         instance("HepMC::FourVector", "/afs/cern.ch/user/t/tprzedzi/HepMC3/include/HepMC/FourVector.h", 21,
                  typeid(::HepMC::FourVector), DefineBehavior(ptr, ptr),
                  &HepMCcLcLFourVector_ShowMembers, &HepMCcLcLFourVector_Dictionary, isa_proxy, 4,
                  sizeof(::HepMC::FourVector) );
      instance.SetNew(&new_HepMCcLcLFourVector);
      instance.SetNewArray(&newArray_HepMCcLcLFourVector);
      instance.SetDelete(&delete_HepMCcLcLFourVector);
      instance.SetDeleteArray(&deleteArray_HepMCcLcLFourVector);
      instance.SetDestructor(&destruct_HepMCcLcLFourVector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HepMC::FourVector*)
   {
      return GenerateInitInstanceLocal((::HepMC::FourVector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HepMC::FourVector*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HepMCcLcLFourVector_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HepMC::FourVector*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HepMCcLcLGenParticleData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HepMCcLcLGenParticleData_Dictionary();
   static void *new_HepMCcLcLGenParticleData(void *p = 0);
   static void *newArray_HepMCcLcLGenParticleData(Long_t size, void *p);
   static void delete_HepMCcLcLGenParticleData(void *p);
   static void deleteArray_HepMCcLcLGenParticleData(void *p);
   static void destruct_HepMCcLcLGenParticleData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HepMC::GenParticleData*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HepMC::GenParticleData) == sizeof(::ROOT::Shadow::HepMC::GenParticleData));
      ::HepMC::GenParticleData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HepMC::GenParticleData),0);
      static ::ROOT::TGenericClassInfo 
         instance("HepMC::GenParticleData", "/afs/cern.ch/user/t/tprzedzi/HepMC3/include/HepMC/Data/GenParticleData.h", 19,
                  typeid(::HepMC::GenParticleData), DefineBehavior(ptr, ptr),
                  &HepMCcLcLGenParticleData_ShowMembers, &HepMCcLcLGenParticleData_Dictionary, isa_proxy, 4,
                  sizeof(::HepMC::GenParticleData) );
      instance.SetNew(&new_HepMCcLcLGenParticleData);
      instance.SetNewArray(&newArray_HepMCcLcLGenParticleData);
      instance.SetDelete(&delete_HepMCcLcLGenParticleData);
      instance.SetDeleteArray(&deleteArray_HepMCcLcLGenParticleData);
      instance.SetDestructor(&destruct_HepMCcLcLGenParticleData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HepMC::GenParticleData*)
   {
      return GenerateInitInstanceLocal((::HepMC::GenParticleData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HepMC::GenParticleData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HepMCcLcLGenParticleData_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenParticleData*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HepMCcLcLGenVertexData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HepMCcLcLGenVertexData_Dictionary();
   static void *new_HepMCcLcLGenVertexData(void *p = 0);
   static void *newArray_HepMCcLcLGenVertexData(Long_t size, void *p);
   static void delete_HepMCcLcLGenVertexData(void *p);
   static void deleteArray_HepMCcLcLGenVertexData(void *p);
   static void destruct_HepMCcLcLGenVertexData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HepMC::GenVertexData*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HepMC::GenVertexData) == sizeof(::ROOT::Shadow::HepMC::GenVertexData));
      ::HepMC::GenVertexData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HepMC::GenVertexData),0);
      static ::ROOT::TGenericClassInfo 
         instance("HepMC::GenVertexData", "/afs/cern.ch/user/t/tprzedzi/HepMC3/include/HepMC/Data/GenVertexData.h", 17,
                  typeid(::HepMC::GenVertexData), DefineBehavior(ptr, ptr),
                  &HepMCcLcLGenVertexData_ShowMembers, &HepMCcLcLGenVertexData_Dictionary, isa_proxy, 4,
                  sizeof(::HepMC::GenVertexData) );
      instance.SetNew(&new_HepMCcLcLGenVertexData);
      instance.SetNewArray(&newArray_HepMCcLcLGenVertexData);
      instance.SetDelete(&delete_HepMCcLcLGenVertexData);
      instance.SetDeleteArray(&deleteArray_HepMCcLcLGenVertexData);
      instance.SetDestructor(&destruct_HepMCcLcLGenVertexData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HepMC::GenVertexData*)
   {
      return GenerateInitInstanceLocal((::HepMC::GenVertexData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HepMC::GenVertexData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HepMCcLcLGenVertexData_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenVertexData*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HepMCcLcLUnits_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HepMCcLcLUnits_Dictionary();
   static void *new_HepMCcLcLUnits(void *p = 0);
   static void *newArray_HepMCcLcLUnits(Long_t size, void *p);
   static void delete_HepMCcLcLUnits(void *p);
   static void deleteArray_HepMCcLcLUnits(void *p);
   static void destruct_HepMCcLcLUnits(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HepMC::Units*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HepMC::Units) == sizeof(::ROOT::Shadow::HepMC::Units));
      ::HepMC::Units *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HepMC::Units),0);
      static ::ROOT::TGenericClassInfo 
         instance("HepMC::Units", "/afs/cern.ch/user/t/tprzedzi/HepMC3/include/HepMC/Units.h", 20,
                  typeid(::HepMC::Units), DefineBehavior(ptr, ptr),
                  &HepMCcLcLUnits_ShowMembers, &HepMCcLcLUnits_Dictionary, isa_proxy, 4,
                  sizeof(::HepMC::Units) );
      instance.SetNew(&new_HepMCcLcLUnits);
      instance.SetNewArray(&newArray_HepMCcLcLUnits);
      instance.SetDelete(&delete_HepMCcLcLUnits);
      instance.SetDeleteArray(&deleteArray_HepMCcLcLUnits);
      instance.SetDestructor(&destruct_HepMCcLcLUnits);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HepMC::Units*)
   {
      return GenerateInitInstanceLocal((::HepMC::Units*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HepMC::Units*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HepMCcLcLUnits_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HepMC::Units*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HepMCcLcLGenPdfInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HepMCcLcLGenPdfInfo_Dictionary();
   static void *new_HepMCcLcLGenPdfInfo(void *p = 0);
   static void *newArray_HepMCcLcLGenPdfInfo(Long_t size, void *p);
   static void delete_HepMCcLcLGenPdfInfo(void *p);
   static void deleteArray_HepMCcLcLGenPdfInfo(void *p);
   static void destruct_HepMCcLcLGenPdfInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HepMC::GenPdfInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HepMC::GenPdfInfo) == sizeof(::ROOT::Shadow::HepMC::GenPdfInfo));
      ::HepMC::GenPdfInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HepMC::GenPdfInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("HepMC::GenPdfInfo", "/afs/cern.ch/user/t/tprzedzi/HepMC3/include/HepMC/GenPdfInfo.h", 23,
                  typeid(::HepMC::GenPdfInfo), DefineBehavior(ptr, ptr),
                  &HepMCcLcLGenPdfInfo_ShowMembers, &HepMCcLcLGenPdfInfo_Dictionary, isa_proxy, 4,
                  sizeof(::HepMC::GenPdfInfo) );
      instance.SetNew(&new_HepMCcLcLGenPdfInfo);
      instance.SetNewArray(&newArray_HepMCcLcLGenPdfInfo);
      instance.SetDelete(&delete_HepMCcLcLGenPdfInfo);
      instance.SetDeleteArray(&deleteArray_HepMCcLcLGenPdfInfo);
      instance.SetDestructor(&destruct_HepMCcLcLGenPdfInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HepMC::GenPdfInfo*)
   {
      return GenerateInitInstanceLocal((::HepMC::GenPdfInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HepMC::GenPdfInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HepMCcLcLGenPdfInfo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenPdfInfo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HepMCcLcLGenHeavyIon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HepMCcLcLGenHeavyIon_Dictionary();
   static void *new_HepMCcLcLGenHeavyIon(void *p = 0);
   static void *newArray_HepMCcLcLGenHeavyIon(Long_t size, void *p);
   static void delete_HepMCcLcLGenHeavyIon(void *p);
   static void deleteArray_HepMCcLcLGenHeavyIon(void *p);
   static void destruct_HepMCcLcLGenHeavyIon(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HepMC::GenHeavyIon*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HepMC::GenHeavyIon) == sizeof(::ROOT::Shadow::HepMC::GenHeavyIon));
      ::HepMC::GenHeavyIon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HepMC::GenHeavyIon),0);
      static ::ROOT::TGenericClassInfo 
         instance("HepMC::GenHeavyIon", "/afs/cern.ch/user/t/tprzedzi/HepMC3/include/HepMC/GenHeavyIon.h", 17,
                  typeid(::HepMC::GenHeavyIon), DefineBehavior(ptr, ptr),
                  &HepMCcLcLGenHeavyIon_ShowMembers, &HepMCcLcLGenHeavyIon_Dictionary, isa_proxy, 4,
                  sizeof(::HepMC::GenHeavyIon) );
      instance.SetNew(&new_HepMCcLcLGenHeavyIon);
      instance.SetNewArray(&newArray_HepMCcLcLGenHeavyIon);
      instance.SetDelete(&delete_HepMCcLcLGenHeavyIon);
      instance.SetDeleteArray(&deleteArray_HepMCcLcLGenHeavyIon);
      instance.SetDestructor(&destruct_HepMCcLcLGenHeavyIon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HepMC::GenHeavyIon*)
   {
      return GenerateInitInstanceLocal((::HepMC::GenHeavyIon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HepMC::GenHeavyIon*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HepMCcLcLGenHeavyIon_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenHeavyIon*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HepMCcLcLGenCrossSection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HepMCcLcLGenCrossSection_Dictionary();
   static void *new_HepMCcLcLGenCrossSection(void *p = 0);
   static void *newArray_HepMCcLcLGenCrossSection(Long_t size, void *p);
   static void delete_HepMCcLcLGenCrossSection(void *p);
   static void deleteArray_HepMCcLcLGenCrossSection(void *p);
   static void destruct_HepMCcLcLGenCrossSection(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HepMC::GenCrossSection*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HepMC::GenCrossSection) == sizeof(::ROOT::Shadow::HepMC::GenCrossSection));
      ::HepMC::GenCrossSection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HepMC::GenCrossSection),0);
      static ::ROOT::TGenericClassInfo 
         instance("HepMC::GenCrossSection", "/afs/cern.ch/user/t/tprzedzi/HepMC3/include/HepMC/GenCrossSection.h", 28,
                  typeid(::HepMC::GenCrossSection), DefineBehavior(ptr, ptr),
                  &HepMCcLcLGenCrossSection_ShowMembers, &HepMCcLcLGenCrossSection_Dictionary, isa_proxy, 4,
                  sizeof(::HepMC::GenCrossSection) );
      instance.SetNew(&new_HepMCcLcLGenCrossSection);
      instance.SetNewArray(&newArray_HepMCcLcLGenCrossSection);
      instance.SetDelete(&delete_HepMCcLcLGenCrossSection);
      instance.SetDeleteArray(&deleteArray_HepMCcLcLGenCrossSection);
      instance.SetDestructor(&destruct_HepMCcLcLGenCrossSection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HepMC::GenCrossSection*)
   {
      return GenerateInitInstanceLocal((::HepMC::GenCrossSection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HepMC::GenCrossSection*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HepMCcLcLGenCrossSection_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenCrossSection*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HepMCcLcLGenEventData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HepMCcLcLGenEventData_Dictionary();
   static void *new_HepMCcLcLGenEventData(void *p = 0);
   static void *newArray_HepMCcLcLGenEventData(Long_t size, void *p);
   static void delete_HepMCcLcLGenEventData(void *p);
   static void deleteArray_HepMCcLcLGenEventData(void *p);
   static void destruct_HepMCcLcLGenEventData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HepMC::GenEventData*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::HepMC::GenEventData) == sizeof(::ROOT::Shadow::HepMC::GenEventData));
      ::HepMC::GenEventData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HepMC::GenEventData),0);
      static ::ROOT::TGenericClassInfo 
         instance("HepMC::GenEventData", "/afs/cern.ch/user/t/tprzedzi/HepMC3/include/HepMC/Data/GenEventData.h", 23,
                  typeid(::HepMC::GenEventData), DefineBehavior(ptr, ptr),
                  &HepMCcLcLGenEventData_ShowMembers, &HepMCcLcLGenEventData_Dictionary, isa_proxy, 4,
                  sizeof(::HepMC::GenEventData) );
      instance.SetNew(&new_HepMCcLcLGenEventData);
      instance.SetNewArray(&newArray_HepMCcLcLGenEventData);
      instance.SetDelete(&delete_HepMCcLcLGenEventData);
      instance.SetDeleteArray(&deleteArray_HepMCcLcLGenEventData);
      instance.SetDestructor(&destruct_HepMCcLcLGenEventData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HepMC::GenEventData*)
   {
      return GenerateInitInstanceLocal((::HepMC::GenEventData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HepMC::GenEventData*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HepMCcLcLGenEventData_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenEventData*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void HepMCcLcLFourVector_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HepMC::FourVector.
      typedef ::ROOT::Shadow::HepMC::FourVector ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HepMC::FourVector*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v1", &sobj->v1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v2", &sobj->v2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v3", &sobj->v3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v4", &sobj->v4);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HepMCcLcLFourVector(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::FourVector : new ::HepMC::FourVector;
   }
   static void *newArray_HepMCcLcLFourVector(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::FourVector[nElements] : new ::HepMC::FourVector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HepMCcLcLFourVector(void *p) {
      delete ((::HepMC::FourVector*)p);
   }
   static void deleteArray_HepMCcLcLFourVector(void *p) {
      delete [] ((::HepMC::FourVector*)p);
   }
   static void destruct_HepMCcLcLFourVector(void *p) {
      typedef ::HepMC::FourVector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HepMC::FourVector

//______________________________________________________________________________
namespace ROOT {
   void HepMCcLcLUnits_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HepMC::Units.
      typedef ::ROOT::Shadow::HepMC::Units ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HepMC::Units*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HepMCcLcLUnits(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::Units : new ::HepMC::Units;
   }
   static void *newArray_HepMCcLcLUnits(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::Units[nElements] : new ::HepMC::Units[nElements];
   }
   // Wrapper around operator delete
   static void delete_HepMCcLcLUnits(void *p) {
      delete ((::HepMC::Units*)p);
   }
   static void deleteArray_HepMCcLcLUnits(void *p) {
      delete [] ((::HepMC::Units*)p);
   }
   static void destruct_HepMCcLcLUnits(void *p) {
      typedef ::HepMC::Units current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HepMC::Units

//______________________________________________________________________________
namespace ROOT {
   void HepMCcLcLSetup_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HepMC::Setup.
      typedef ::ROOT::Shadow::HepMC::Setup ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HepMC::Setup*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOT {
} // end of namespace ROOT for class ::HepMC::Setup

//______________________________________________________________________________
namespace ROOT {
   void HepMCcLcLGenParticleData_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HepMC::GenParticleData.
      typedef ::ROOT::Shadow::HepMC::GenParticleData ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenParticleData*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdg_id", &sobj->pdg_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &sobj->status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status_subcode", &sobj->status_subcode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "is_mass_set", &sobj->is_mass_set);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mass", &sobj->mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momentum", (void*)&sobj->momentum);
      R__insp.InspectMember("HepMC::FourVector", (void*)&sobj->momentum, "momentum.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HepMCcLcLGenParticleData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenParticleData : new ::HepMC::GenParticleData;
   }
   static void *newArray_HepMCcLcLGenParticleData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenParticleData[nElements] : new ::HepMC::GenParticleData[nElements];
   }
   // Wrapper around operator delete
   static void delete_HepMCcLcLGenParticleData(void *p) {
      delete ((::HepMC::GenParticleData*)p);
   }
   static void deleteArray_HepMCcLcLGenParticleData(void *p) {
      delete [] ((::HepMC::GenParticleData*)p);
   }
   static void destruct_HepMCcLcLGenParticleData(void *p) {
      typedef ::HepMC::GenParticleData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HepMC::GenParticleData

//______________________________________________________________________________
namespace ROOT {
   void HepMCcLcLGenVertexData_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HepMC::GenVertexData.
      typedef ::ROOT::Shadow::HepMC::GenVertexData ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenVertexData*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "position", (void*)&sobj->position);
      R__insp.InspectMember("HepMC::FourVector", (void*)&sobj->position, "position.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HepMCcLcLGenVertexData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenVertexData : new ::HepMC::GenVertexData;
   }
   static void *newArray_HepMCcLcLGenVertexData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenVertexData[nElements] : new ::HepMC::GenVertexData[nElements];
   }
   // Wrapper around operator delete
   static void delete_HepMCcLcLGenVertexData(void *p) {
      delete ((::HepMC::GenVertexData*)p);
   }
   static void deleteArray_HepMCcLcLGenVertexData(void *p) {
      delete [] ((::HepMC::GenVertexData*)p);
   }
   static void destruct_HepMCcLcLGenVertexData(void *p) {
      typedef ::HepMC::GenVertexData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HepMC::GenVertexData

//______________________________________________________________________________
namespace ROOT {
   void HepMCcLcLGenPdfInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HepMC::GenPdfInfo.
      typedef ::ROOT::Shadow::HepMC::GenPdfInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenPdfInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parton_id[2]", sobj->parton_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdf_id[2]", sobj->pdf_id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scale", &sobj->scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x[2]", sobj->x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xf[2]", sobj->xf);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HepMCcLcLGenPdfInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenPdfInfo : new ::HepMC::GenPdfInfo;
   }
   static void *newArray_HepMCcLcLGenPdfInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenPdfInfo[nElements] : new ::HepMC::GenPdfInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_HepMCcLcLGenPdfInfo(void *p) {
      delete ((::HepMC::GenPdfInfo*)p);
   }
   static void deleteArray_HepMCcLcLGenPdfInfo(void *p) {
      delete [] ((::HepMC::GenPdfInfo*)p);
   }
   static void destruct_HepMCcLcLGenPdfInfo(void *p) {
      typedef ::HepMC::GenPdfInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HepMC::GenPdfInfo

//______________________________________________________________________________
namespace ROOT {
   void HepMCcLcLGenHeavyIon_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HepMC::GenHeavyIon.
      typedef ::ROOT::Shadow::HepMC::GenHeavyIon ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenHeavyIon*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ncoll_hard", &sobj->Ncoll_hard);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Npart_proj", &sobj->Npart_proj);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Npart_targ", &sobj->Npart_targ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ncoll", &sobj->Ncoll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "spectator_neutrons", &sobj->spectator_neutrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "spectator_protons", &sobj->spectator_protons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "N_Nwounded_collisions", &sobj->N_Nwounded_collisions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Nwounded_N_collisions", &sobj->Nwounded_N_collisions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Nwounded_Nwounded_collisions", &sobj->Nwounded_Nwounded_collisions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "impact_parameter", &sobj->impact_parameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_plane_angle", &sobj->event_plane_angle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eccentricity", &sobj->eccentricity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_inel_NN", &sobj->sigma_inel_NN);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HepMCcLcLGenHeavyIon(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenHeavyIon : new ::HepMC::GenHeavyIon;
   }
   static void *newArray_HepMCcLcLGenHeavyIon(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenHeavyIon[nElements] : new ::HepMC::GenHeavyIon[nElements];
   }
   // Wrapper around operator delete
   static void delete_HepMCcLcLGenHeavyIon(void *p) {
      delete ((::HepMC::GenHeavyIon*)p);
   }
   static void deleteArray_HepMCcLcLGenHeavyIon(void *p) {
      delete [] ((::HepMC::GenHeavyIon*)p);
   }
   static void destruct_HepMCcLcLGenHeavyIon(void *p) {
      typedef ::HepMC::GenHeavyIon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HepMC::GenHeavyIon

//______________________________________________________________________________
namespace ROOT {
   void HepMCcLcLGenCrossSection_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HepMC::GenCrossSection.
      typedef ::ROOT::Shadow::HepMC::GenCrossSection ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenCrossSection*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cross_section", &sobj->cross_section);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cross_section_error", &sobj->cross_section_error);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HepMCcLcLGenCrossSection(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenCrossSection : new ::HepMC::GenCrossSection;
   }
   static void *newArray_HepMCcLcLGenCrossSection(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenCrossSection[nElements] : new ::HepMC::GenCrossSection[nElements];
   }
   // Wrapper around operator delete
   static void delete_HepMCcLcLGenCrossSection(void *p) {
      delete ((::HepMC::GenCrossSection*)p);
   }
   static void deleteArray_HepMCcLcLGenCrossSection(void *p) {
      delete [] ((::HepMC::GenCrossSection*)p);
   }
   static void destruct_HepMCcLcLGenCrossSection(void *p) {
      typedef ::HepMC::GenCrossSection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HepMC::GenCrossSection

//______________________________________________________________________________
namespace ROOT {
   void HepMCcLcLGenEventData_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class HepMC::GenEventData.
      typedef ::ROOT::Shadow::HepMC::GenEventData ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::HepMC::GenEventData*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event_number", &sobj->event_number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momentum_unit", &sobj->momentum_unit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "length_unit", &sobj->length_unit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "particles", (void*)&sobj->particles);
      R__insp.InspectMember("vector<GenParticleData>", (void*)&sobj->particles, "particles.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vertices", (void*)&sobj->vertices);
      R__insp.InspectMember("vector<GenVertexData>", (void*)&sobj->vertices, "vertices.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "links1", (void*)&sobj->links1);
      R__insp.InspectMember("vector<int>", (void*)&sobj->links1, "links1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "links2", (void*)&sobj->links2);
      R__insp.InspectMember("vector<int>", (void*)&sobj->links2, "links2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdf_info", (void*)&sobj->pdf_info);
      R__insp.InspectMember("HepMC::GenPdfInfo", (void*)&sobj->pdf_info, "pdf_info.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "heavy_ion", (void*)&sobj->heavy_ion);
      R__insp.InspectMember("HepMC::GenHeavyIon", (void*)&sobj->heavy_ion, "heavy_ion.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cross_section", (void*)&sobj->cross_section);
      R__insp.InspectMember("HepMC::GenCrossSection", (void*)&sobj->cross_section, "cross_section.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HepMCcLcLGenEventData(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenEventData : new ::HepMC::GenEventData;
   }
   static void *newArray_HepMCcLcLGenEventData(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HepMC::GenEventData[nElements] : new ::HepMC::GenEventData[nElements];
   }
   // Wrapper around operator delete
   static void delete_HepMCcLcLGenEventData(void *p) {
      delete ((::HepMC::GenEventData*)p);
   }
   static void deleteArray_HepMCcLcLGenEventData(void *p) {
      delete [] ((::HepMC::GenEventData*)p);
   }
   static void destruct_HepMCcLcLGenEventData(void *p) {
      typedef ::HepMC::GenEventData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HepMC::GenEventData

namespace ROOT {
   void vectorlEHepMCcLcLGenParticleDatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEHepMCcLcLGenParticleDatagR_Dictionary();
   static void *new_vectorlEHepMCcLcLGenParticleDatagR(void *p = 0);
   static void *newArray_vectorlEHepMCcLcLGenParticleDatagR(Long_t size, void *p);
   static void delete_vectorlEHepMCcLcLGenParticleDatagR(void *p);
   static void deleteArray_vectorlEHepMCcLcLGenParticleDatagR(void *p);
   static void destruct_vectorlEHepMCcLcLGenParticleDatagR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<HepMC::GenParticleData>*)
   {
      vector<HepMC::GenParticleData> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<HepMC::GenParticleData>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<HepMC::GenParticleData>", -2, "prec_stl/vector", 49,
                  typeid(vector<HepMC::GenParticleData>), DefineBehavior(ptr, ptr),
                  0, &vectorlEHepMCcLcLGenParticleDatagR_Dictionary, isa_proxy, 4,
                  sizeof(vector<HepMC::GenParticleData>) );
      instance.SetNew(&new_vectorlEHepMCcLcLGenParticleDatagR);
      instance.SetNewArray(&newArray_vectorlEHepMCcLcLGenParticleDatagR);
      instance.SetDelete(&delete_vectorlEHepMCcLcLGenParticleDatagR);
      instance.SetDeleteArray(&deleteArray_vectorlEHepMCcLcLGenParticleDatagR);
      instance.SetDestructor(&destruct_vectorlEHepMCcLcLGenParticleDatagR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<HepMC::GenParticleData> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<HepMC::GenParticleData>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEHepMCcLcLGenParticleDatagR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<HepMC::GenParticleData>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEHepMCcLcLGenParticleDatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HepMC::GenParticleData> : new vector<HepMC::GenParticleData>;
   }
   static void *newArray_vectorlEHepMCcLcLGenParticleDatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HepMC::GenParticleData>[nElements] : new vector<HepMC::GenParticleData>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEHepMCcLcLGenParticleDatagR(void *p) {
      delete ((vector<HepMC::GenParticleData>*)p);
   }
   static void deleteArray_vectorlEHepMCcLcLGenParticleDatagR(void *p) {
      delete [] ((vector<HepMC::GenParticleData>*)p);
   }
   static void destruct_vectorlEHepMCcLcLGenParticleDatagR(void *p) {
      typedef vector<HepMC::GenParticleData> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<HepMC::GenParticleData>

namespace ROOT {
   void vectorlEHepMCcLcLGenVertexDatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEHepMCcLcLGenVertexDatagR_Dictionary();
   static void *new_vectorlEHepMCcLcLGenVertexDatagR(void *p = 0);
   static void *newArray_vectorlEHepMCcLcLGenVertexDatagR(Long_t size, void *p);
   static void delete_vectorlEHepMCcLcLGenVertexDatagR(void *p);
   static void deleteArray_vectorlEHepMCcLcLGenVertexDatagR(void *p);
   static void destruct_vectorlEHepMCcLcLGenVertexDatagR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<HepMC::GenVertexData>*)
   {
      vector<HepMC::GenVertexData> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<HepMC::GenVertexData>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<HepMC::GenVertexData>", -2, "prec_stl/vector", 49,
                  typeid(vector<HepMC::GenVertexData>), DefineBehavior(ptr, ptr),
                  0, &vectorlEHepMCcLcLGenVertexDatagR_Dictionary, isa_proxy, 4,
                  sizeof(vector<HepMC::GenVertexData>) );
      instance.SetNew(&new_vectorlEHepMCcLcLGenVertexDatagR);
      instance.SetNewArray(&newArray_vectorlEHepMCcLcLGenVertexDatagR);
      instance.SetDelete(&delete_vectorlEHepMCcLcLGenVertexDatagR);
      instance.SetDeleteArray(&deleteArray_vectorlEHepMCcLcLGenVertexDatagR);
      instance.SetDestructor(&destruct_vectorlEHepMCcLcLGenVertexDatagR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<HepMC::GenVertexData> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<HepMC::GenVertexData>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEHepMCcLcLGenVertexDatagR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<HepMC::GenVertexData>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEHepMCcLcLGenVertexDatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HepMC::GenVertexData> : new vector<HepMC::GenVertexData>;
   }
   static void *newArray_vectorlEHepMCcLcLGenVertexDatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HepMC::GenVertexData>[nElements] : new vector<HepMC::GenVertexData>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEHepMCcLcLGenVertexDatagR(void *p) {
      delete ((vector<HepMC::GenVertexData>*)p);
   }
   static void deleteArray_vectorlEHepMCcLcLGenVertexDatagR(void *p) {
      delete [] ((vector<HepMC::GenVertexData>*)p);
   }
   static void destruct_vectorlEHepMCcLcLGenVertexDatagR(void *p) {
      typedef vector<HepMC::GenVertexData> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<HepMC::GenVertexData>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

/********************************************************
* rootIO_Classes.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablerootIO_Classes();

extern "C" void G__set_cpp_environmentrootIO_Classes() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("/afs/cern.ch/user/t/tprzedzi/HepMC3/rootIO/include/rootIO_Classes.hh");
  G__cpp_reset_tagtablerootIO_Classes();
}
#include <new>
extern "C" int G__cpp_dllrevrootIO_Classes() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HepMC::Setup */
static int G__rootIO_Classes_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HepMC::Setup::print_errors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HepMC::Setup::set_print_errors((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HepMC::Setup::print_warnings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HepMC::Setup::set_print_warnings((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_169_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HepMC::Setup::debug_level());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_169_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HepMC::Setup::set_debug_level((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootIO_Classes_169_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HepMC::Setup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HepMC::Setup(*(HepMC::Setup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootIO_Classes_169_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::Setup* dest = (HepMC::Setup*) G__getstructoffset();
   *dest = *(HepMC::Setup*) libp->para[0].ref;
   const HepMC::Setup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HepMC::FourVector */
static int G__rootIO_Classes_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::FourVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::FourVector[n];
     } else {
       p = new((void*) gvp) HepMC::FourVector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::FourVector;
     } else {
       p = new((void*) gvp) HepMC::FourVector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::FourVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HepMC::FourVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) HepMC::FourVector(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::FourVector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HepMC::FourVector(*(HepMC::FourVector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HepMC::FourVector(*(HepMC::FourVector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HepMC::FourVector*) G__getstructoffset())->m());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HepMC::FourVector*) G__getstructoffset())->length());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::FourVector*) G__getstructoffset())->is_zero());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::FourVector*) G__getstructoffset())->operator==(*(HepMC::FourVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::FourVector*) G__getstructoffset())->operator!=(*(HepMC::FourVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HepMC::FourVector* pobj;
         const HepMC::FourVector xobj = ((const HepMC::FourVector*) G__getstructoffset())->operator+(*(HepMC::FourVector*) libp->para[0].ref);
         pobj = new HepMC::FourVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HepMC::FourVector* pobj;
         const HepMC::FourVector xobj = ((const HepMC::FourVector*) G__getstructoffset())->operator-(*(HepMC::FourVector*) libp->para[0].ref);
         pobj = new HepMC::FourVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HepMC::FourVector* pobj;
         const HepMC::FourVector xobj = ((const HepMC::FourVector*) G__getstructoffset())->operator*((const double) G__double(libp->para[0]));
         pobj = new HepMC::FourVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HepMC::FourVector* pobj;
         const HepMC::FourVector xobj = ((const HepMC::FourVector*) G__getstructoffset())->operator/((const double) G__double(libp->para[0]));
         pobj = new HepMC::FourVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->operator+=(*(HepMC::FourVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->operator-=(*(HepMC::FourVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->operator*=((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->operator/=((const double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HepMC::FourVector::AlmostEqualZero((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HepMC::FourVector::AlmostEqual2sComplement((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (unsigned int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HepMC::FourVector::AlmostEqual2sComplement((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HepMC::FourVector*) G__getstructoffset())->px());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->setPx((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HepMC::FourVector*) G__getstructoffset())->py());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->setPy((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HepMC::FourVector*) G__getstructoffset())->pz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->setPz((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HepMC::FourVector*) G__getstructoffset())->e());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->setE((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HepMC::FourVector*) G__getstructoffset())->x());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->setX((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HepMC::FourVector*) G__getstructoffset())->y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->setY((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HepMC::FourVector*) G__getstructoffset())->z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->setZ((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HepMC::FourVector*) G__getstructoffset())->t());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->setT((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::FourVector*) G__getstructoffset())->set((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_170_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HepMC::FourVector& obj = HepMC::FourVector::ZERO_VECTOR();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HepMC::FourVector G__THepMCcLcLFourVector;
static int G__rootIO_Classes_170_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HepMC::FourVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HepMC::FourVector*) (soff+(sizeof(HepMC::FourVector)*i)))->~G__THepMCcLcLFourVector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HepMC::FourVector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HepMC::FourVector*) (soff))->~G__THepMCcLcLFourVector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootIO_Classes_170_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::FourVector* dest = (HepMC::FourVector*) G__getstructoffset();
   *dest = *(HepMC::FourVector*) libp->para[0].ref;
   const HepMC::FourVector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HepMC::GenParticleData */
// automatic default constructor
static int G__rootIO_Classes_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenParticleData *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenParticleData[n];
     } else {
       p = new((void*) gvp) HepMC::GenParticleData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenParticleData;
     } else {
       p = new((void*) gvp) HepMC::GenParticleData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootIO_Classes_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HepMC::GenParticleData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HepMC::GenParticleData(*(HepMC::GenParticleData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HepMC::GenParticleData G__THepMCcLcLGenParticleData;
static int G__rootIO_Classes_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HepMC::GenParticleData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HepMC::GenParticleData*) (soff+(sizeof(HepMC::GenParticleData)*i)))->~G__THepMCcLcLGenParticleData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HepMC::GenParticleData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HepMC::GenParticleData*) (soff))->~G__THepMCcLcLGenParticleData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootIO_Classes_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenParticleData* dest = (HepMC::GenParticleData*) G__getstructoffset();
   *dest = *(HepMC::GenParticleData*) libp->para[0].ref;
   const HepMC::GenParticleData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HepMC::GenVertexData */
// automatic default constructor
static int G__rootIO_Classes_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenVertexData *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenVertexData[n];
     } else {
       p = new((void*) gvp) HepMC::GenVertexData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenVertexData;
     } else {
       p = new((void*) gvp) HepMC::GenVertexData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootIO_Classes_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HepMC::GenVertexData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HepMC::GenVertexData(*(HepMC::GenVertexData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HepMC::GenVertexData G__THepMCcLcLGenVertexData;
static int G__rootIO_Classes_172_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HepMC::GenVertexData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HepMC::GenVertexData*) (soff+(sizeof(HepMC::GenVertexData)*i)))->~G__THepMCcLcLGenVertexData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HepMC::GenVertexData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HepMC::GenVertexData*) (soff))->~G__THepMCcLcLGenVertexData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootIO_Classes_172_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenVertexData* dest = (HepMC::GenVertexData*) G__getstructoffset();
   *dest = *(HepMC::GenVertexData*) libp->para[0].ref;
   const HepMC::GenVertexData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HepMC::Units */
static int G__rootIO_Classes_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HepMC::Units::momentum_unit(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HepMC::Units::length_unit(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = HepMC::Units::name((HepMC::Units::MomentumUnit) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = HepMC::Units::name((HepMC::Units::LengthUnit) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_173_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HepMC::Units::convert(*(HepMC::FourVector*) libp->para[0].ref, (HepMC::Units::MomentumUnit) G__int(libp->para[1])
, (HepMC::Units::MomentumUnit) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_173_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HepMC::Units::convert(*(HepMC::FourVector*) libp->para[0].ref, (HepMC::Units::LengthUnit) G__int(libp->para[1])
, (HepMC::Units::LengthUnit) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__rootIO_Classes_173_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::Units *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::Units[n];
     } else {
       p = new((void*) gvp) HepMC::Units[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::Units;
     } else {
       p = new((void*) gvp) HepMC::Units;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnits));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootIO_Classes_173_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HepMC::Units* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HepMC::Units(*(HepMC::Units*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnits));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HepMC::Units G__THepMCcLcLUnits;
static int G__rootIO_Classes_173_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HepMC::Units*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HepMC::Units*) (soff+(sizeof(HepMC::Units)*i)))->~G__THepMCcLcLUnits();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HepMC::Units*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HepMC::Units*) (soff))->~G__THepMCcLcLUnits();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootIO_Classes_173_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::Units* dest = (HepMC::Units*) G__getstructoffset();
   *dest = *(HepMC::Units*) libp->para[0].ref;
   const HepMC::Units& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HepMC::GenPdfInfo */
static int G__rootIO_Classes_176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      ((HepMC::GenPdfInfo*) G__getstructoffset())->set(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((HepMC::GenPdfInfo*) G__getstructoffset())->set(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]), (int) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((HepMC::GenPdfInfo*) G__getstructoffset())->set(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::GenPdfInfo*) G__getstructoffset())->operator==(*(HepMC::GenPdfInfo*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::GenPdfInfo*) G__getstructoffset())->operator!=(*(HepMC::GenPdfInfo*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::GenPdfInfo*) G__getstructoffset())->is_valid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const HepMC::GenPdfInfo*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((const HepMC::GenPdfInfo*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__rootIO_Classes_176_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenPdfInfo *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenPdfInfo[n];
     } else {
       p = new((void*) gvp) HepMC::GenPdfInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenPdfInfo;
     } else {
       p = new((void*) gvp) HepMC::GenPdfInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootIO_Classes_176_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HepMC::GenPdfInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HepMC::GenPdfInfo(*(HepMC::GenPdfInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HepMC::GenPdfInfo G__THepMCcLcLGenPdfInfo;
static int G__rootIO_Classes_176_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HepMC::GenPdfInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HepMC::GenPdfInfo*) (soff+(sizeof(HepMC::GenPdfInfo)*i)))->~G__THepMCcLcLGenPdfInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HepMC::GenPdfInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HepMC::GenPdfInfo*) (soff))->~G__THepMCcLcLGenPdfInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootIO_Classes_176_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenPdfInfo* dest = (HepMC::GenPdfInfo*) G__getstructoffset();
   *dest = *(HepMC::GenPdfInfo*) libp->para[0].ref;
   const HepMC::GenPdfInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HepMC::GenHeavyIon */
static int G__rootIO_Classes_177_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 13:
      ((HepMC::GenHeavyIon*) G__getstructoffset())->set(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]), (float) G__double(libp->para[9])
, (float) G__double(libp->para[10]), (float) G__double(libp->para[11])
, (float) G__double(libp->para[12]));
      G__setnull(result7);
      break;
   case 12:
      ((HepMC::GenHeavyIon*) G__getstructoffset())->set(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]), (float) G__double(libp->para[9])
, (float) G__double(libp->para[10]), (float) G__double(libp->para[11]));
      G__setnull(result7);
      break;
   case 11:
      ((HepMC::GenHeavyIon*) G__getstructoffset())->set(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]), (float) G__double(libp->para[9])
, (float) G__double(libp->para[10]));
      G__setnull(result7);
      break;
   case 10:
      ((HepMC::GenHeavyIon*) G__getstructoffset())->set(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]), (float) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((HepMC::GenHeavyIon*) G__getstructoffset())->set(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7])
, (int) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((HepMC::GenHeavyIon*) G__getstructoffset())->set(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]), (int) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((HepMC::GenHeavyIon*) G__getstructoffset())->set(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((HepMC::GenHeavyIon*) G__getstructoffset())->set((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_177_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::GenHeavyIon*) G__getstructoffset())->operator==(*(HepMC::GenHeavyIon*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::GenHeavyIon*) G__getstructoffset())->operator!=(*(HepMC::GenHeavyIon*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::GenHeavyIon*) G__getstructoffset())->is_valid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const HepMC::GenHeavyIon*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((const HepMC::GenHeavyIon*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__rootIO_Classes_177_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenHeavyIon *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenHeavyIon[n];
     } else {
       p = new((void*) gvp) HepMC::GenHeavyIon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenHeavyIon;
     } else {
       p = new((void*) gvp) HepMC::GenHeavyIon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootIO_Classes_177_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HepMC::GenHeavyIon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HepMC::GenHeavyIon(*(HepMC::GenHeavyIon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HepMC::GenHeavyIon G__THepMCcLcLGenHeavyIon;
static int G__rootIO_Classes_177_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HepMC::GenHeavyIon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HepMC::GenHeavyIon*) (soff+(sizeof(HepMC::GenHeavyIon)*i)))->~G__THepMCcLcLGenHeavyIon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HepMC::GenHeavyIon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HepMC::GenHeavyIon*) (soff))->~G__THepMCcLcLGenHeavyIon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootIO_Classes_177_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenHeavyIon* dest = (HepMC::GenHeavyIon*) G__getstructoffset();
   *dest = *(HepMC::GenHeavyIon*) libp->para[0].ref;
   const HepMC::GenHeavyIon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HepMC::GenCrossSection */
static int G__rootIO_Classes_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMC::GenCrossSection*) G__getstructoffset())->set_cross_section((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::GenCrossSection*) G__getstructoffset())->operator==(*(HepMC::GenCrossSection*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_178_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::GenCrossSection*) G__getstructoffset())->operator!=(*(HepMC::GenCrossSection*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HepMC::GenCrossSection*) G__getstructoffset())->is_valid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const HepMC::GenCrossSection*) G__getstructoffset())->print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((const HepMC::GenCrossSection*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__rootIO_Classes_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenCrossSection *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenCrossSection[n];
     } else {
       p = new((void*) gvp) HepMC::GenCrossSection[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenCrossSection;
     } else {
       p = new((void*) gvp) HepMC::GenCrossSection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenCrossSection));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootIO_Classes_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HepMC::GenCrossSection* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HepMC::GenCrossSection(*(HepMC::GenCrossSection*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenCrossSection));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HepMC::GenCrossSection G__THepMCcLcLGenCrossSection;
static int G__rootIO_Classes_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HepMC::GenCrossSection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HepMC::GenCrossSection*) (soff+(sizeof(HepMC::GenCrossSection)*i)))->~G__THepMCcLcLGenCrossSection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HepMC::GenCrossSection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HepMC::GenCrossSection*) (soff))->~G__THepMCcLcLGenCrossSection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootIO_Classes_178_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenCrossSection* dest = (HepMC::GenCrossSection*) G__getstructoffset();
   *dest = *(HepMC::GenCrossSection*) libp->para[0].ref;
   const HepMC::GenCrossSection& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HepMC::GenEventData */
// automatic default constructor
static int G__rootIO_Classes_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenEventData *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenEventData[n];
     } else {
       p = new((void*) gvp) HepMC::GenEventData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMC::GenEventData;
     } else {
       p = new((void*) gvp) HepMC::GenEventData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenEventData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__rootIO_Classes_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HepMC::GenEventData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HepMC::GenEventData(*(HepMC::GenEventData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenEventData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HepMC::GenEventData G__THepMCcLcLGenEventData;
static int G__rootIO_Classes_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HepMC::GenEventData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HepMC::GenEventData*) (soff+(sizeof(HepMC::GenEventData)*i)))->~G__THepMCcLcLGenEventData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HepMC::GenEventData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HepMC::GenEventData*) (soff))->~G__THepMCcLcLGenEventData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__rootIO_Classes_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMC::GenEventData* dest = (HepMC::GenEventData*) G__getstructoffset();
   *dest = *(HepMC::GenEventData*) libp->para[0].ref;
   const HepMC::GenEventData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> > */
static int G__rootIO_Classes_181_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reference obj = ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->at((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_reference obj = ((const vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->at((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator* pobj;
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator xobj = ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->begin();
         pobj = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator* pobj;
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator xobj = ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->end();
         pobj = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reverse_iterator* pobj;
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reverse_iterator xobj = ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->rbegin();
         pobj = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reverse_iterator* pobj;
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reverse_iterator xobj = ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->rend();
         pobj = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->resize((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->resize((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]), *((HepMC::GenParticleData*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reference obj = ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->operator[]((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_reference obj = ((const vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->operator[]((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >[n];
     } else {
       p = new((void*) gvp) vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >;
     } else {
       p = new((void*) gvp) vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]), *(HepMC::GenParticleData*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]), *(HepMC::GenParticleData*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >(*(vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >(*(vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >(*((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_iterator*) G__int(libp->para[0])), *((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >(*((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_iterator*) G__int(libp->para[0])), *((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >& obj = ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->operator=(*(vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->reserve((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HepMC::GenParticleData& obj = ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HepMC::GenParticleData& obj = ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->push_back(*(HepMC::GenParticleData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->swap(*(vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator* pobj;
         vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator xobj = ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->insert(*((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator*) G__int(libp->para[0])), *(HepMC::GenParticleData*) libp->para[1].ref);
         pobj = new vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->insert(*((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator*) G__int(libp->para[0])), *((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_iterator*) G__int(libp->para[1]))
, *((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->insert(*((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator*) G__int(libp->para[0])), (vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type) G__int(libp->para[1])
, *(HepMC::GenParticleData*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->erase(*((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->erase(*((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator*) G__int(libp->para[0])), *((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_181_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> > G__TvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR;
static int G__rootIO_Classes_181_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) (soff+(sizeof(vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >)*i)))->~G__TvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*) (soff))->~G__TvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> > */
static int G__rootIO_Classes_185_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reference obj = ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->at((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_reference obj = ((const vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->at((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator* pobj;
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator xobj = ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->begin();
         pobj = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator* pobj;
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator xobj = ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->end();
         pobj = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reverse_iterator* pobj;
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reverse_iterator xobj = ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->rbegin();
         pobj = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reverse_iterator* pobj;
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reverse_iterator xobj = ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->rend();
         pobj = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->resize((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->resize((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]), *((HepMC::GenVertexData*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reference obj = ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->operator[]((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_reference obj = ((const vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->operator[]((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >[n];
     } else {
       p = new((void*) gvp) vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >;
     } else {
       p = new((void*) gvp) vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]), *(HepMC::GenVertexData*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]), *(HepMC::GenVertexData*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >(*(vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >(*(vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >(*((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_iterator*) G__int(libp->para[0])), *((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >(*((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_iterator*) G__int(libp->para[0])), *((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >& obj = ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->operator=(*(vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->reserve((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HepMC::GenVertexData& obj = ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HepMC::GenVertexData& obj = ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->push_back(*(HepMC::GenVertexData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->swap(*(vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator* pobj;
         vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator xobj = ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->insert(*((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator*) G__int(libp->para[0])), *(HepMC::GenVertexData*) libp->para[1].ref);
         pobj = new vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->insert(*((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator*) G__int(libp->para[0])), *((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_iterator*) G__int(libp->para[1]))
, *((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->insert(*((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator*) G__int(libp->para[0])), (vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type) G__int(libp->para[1])
, *(HepMC::GenVertexData*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->erase(*((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->erase(*((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator*) G__int(libp->para[0])), *((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_185_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> > G__TvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR;
static int G__rootIO_Classes_185_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) (soff+(sizeof(vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >)*i)))->~G__TvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*) (soff))->~G__TvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<int,allocator<int> > */
static int G__rootIO_Classes_189_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >::reference obj = ((vector<int,allocator<int> >*) G__getstructoffset())->at((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::const_reference obj = ((const vector<int,allocator<int> >*) G__getstructoffset())->at((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->begin();
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->end();
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::reverse_iterator* pobj;
         vector<int,allocator<int> >::reverse_iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->rbegin();
         pobj = new vector<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::reverse_iterator* pobj;
         vector<int,allocator<int> >::reverse_iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->rend();
         pobj = new vector<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->resize((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->resize((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >::reference obj = ((vector<int,allocator<int> >*) G__getstructoffset())->operator[]((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::const_reference obj = ((const vector<int,allocator<int> >*) G__getstructoffset())->operator[]((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >[n];
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >;
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<int,allocator<int> >(*(vector<int,allocator<int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<int,allocator<int> >(*(vector<int,allocator<int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->operator=(*(vector<int,allocator<int> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->reserve((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->push_back(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->swap(*(vector<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *(int*) G__Intref(&libp->para[1]));
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1]))
, *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), (vector<int,allocator<int> >::size_type) G__int(libp->para[1])
, *(int*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->erase(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->erase(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__rootIO_Classes_189_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<int,allocator<int> > G__TvectorlEintcOallocatorlEintgRsPgR;
static int G__rootIO_Classes_189_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<int,allocator<int> >*) (soff+(sizeof(vector<int,allocator<int> >)*i)))->~G__TvectorlEintcOallocatorlEintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<int,allocator<int> >*) (soff))->~G__TvectorlEintcOallocatorlEintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HepMC::Setup */

/* HepMC::FourVector */

/* HepMC::GenParticleData */

/* HepMC::GenVertexData */

/* HepMC::Units */

/* HepMC::GenPdfInfo */

/* HepMC::GenHeavyIon */

/* HepMC::GenCrossSection */

/* HepMC::GenEventData */

/* vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> > */

/* vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> > */

/* vector<int,allocator<int> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncrootIO_Classes {
 public:
  G__Sizep2memfuncrootIO_Classes(): p(&G__Sizep2memfuncrootIO_Classes::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncrootIO_Classes::*p)();
};

size_t G__get_sizep2memfuncrootIO_Classes()
{
  G__Sizep2memfuncrootIO_Classes a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancerootIO_Classes() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablerootIO_Classes() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<GenParticleData>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData),256,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData),1,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData),257,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HepMC::GenParticleData>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<GenVertexData>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData),256,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData),1,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData),257,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HepMC::GenVertexData>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HepMC::Setup */
static void G__setup_memvarHepMCcLcLSetup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLSetup));
   { HepMC::Setup *p; p=(HepMC::Setup*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("DEFAULT_DOUBLE_ALMOST_EQUAL_MAXULPS=%lluULL",(unsigned long long)HepMC::Setup::DEFAULT_DOUBLE_ALMOST_EQUAL_MAXULPS).data(),0,"!< Default maxUlps for AlmostEqual2sComplement function (double precision)");
   G__memvar_setup((void*)(&HepMC::Setup::DOUBLE_EPSILON),100,0,1,-1,-1,-2,1,"DOUBLE_EPSILON=",0,"!< Default threshold for comparing double variables");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-2,4,"m_is_printing_errors=",0,"!< Flag for printing error messages");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-2,4,"m_is_printing_warnings=",0,"!< Flag for printing warning messages");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-2,4,"m_debug_level=",0,"!< Level of debug messages printed out");
   }
   G__tag_memvar_reset();
}


   /* HepMC::FourVector */
static void G__setup_memvarHepMCcLcLFourVector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector));
   { HepMC::FourVector *p; p=(HepMC::FourVector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"v1=",0,"/< px or x. Interpretation depends on accessors used");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"v2=",0,"/< py or y. Interpretation depends on accessors used");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"v3=",0,"/< pz or z. Interpretation depends on accessors used");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"v4=",0,"/< e  or t. Interpretation depends on accessors used");
   }
   G__tag_memvar_reset();
}


   /* HepMC::GenParticleData */
static void G__setup_memvarHepMCcLcLGenParticleData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData));
   { HepMC::GenParticleData *p; p=(HepMC::GenParticleData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pdg_id)-(long)(p)),105,0,0,-1,-1,-1,1,"pdg_id=",0,"/< PDG ID");
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),105,0,0,-1,-1,-1,1,"status=",0,"/< Status");
   G__memvar_setup((void*)((long)(&p->status_subcode)-(long)(p)),105,0,0,-1,-1,-1,1,"status_subcode=",0,"/< Status subcode");
   G__memvar_setup((void*)((long)(&p->is_mass_set)-(long)(p)),103,0,0,-1,-1,-1,1,"is_mass_set=",0,"/< Check if generated mass is set");
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),100,0,0,-1,-1,-1,1,"mass=",0,"/< Generated mass (if set)");
   G__memvar_setup((void*)((long)(&p->momentum)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector),-1,-1,1,"momentum=",0,"/< Momentum");
   }
   G__tag_memvar_reset();
}


   /* HepMC::GenVertexData */
static void G__setup_memvarHepMCcLcLGenVertexData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData));
   { HepMC::GenVertexData *p; p=(HepMC::GenVertexData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->position)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector),-1,-1,1,"position=",0,"/< Position in time-space");
   }
   G__tag_memvar_reset();
}


   /* HepMC::Units */
static void G__setup_memvarHepMCcLcLUnits(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnits));
   { HepMC::Units *p; p=(HepMC::Units*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnitscLcLMomentumUnit),-1,-2,1,G__FastAllocString(2048).Format("MEV=%lldLL",(long long)HepMC::Units::MEV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnitscLcLMomentumUnit),-1,-2,1,G__FastAllocString(2048).Format("GEV=%lldLL",(long long)HepMC::Units::GEV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnitscLcLLengthUnit),-1,-2,1,G__FastAllocString(2048).Format("MM=%lldLL",(long long)HepMC::Units::MM).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnitscLcLLengthUnit),-1,-2,1,G__FastAllocString(2048).Format("CM=%lldLL",(long long)HepMC::Units::CM).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HepMC::GenPdfInfo */
static void G__setup_memvarHepMCcLcLGenPdfInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo));
   { HepMC::GenPdfInfo *p; p=(HepMC::GenPdfInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->parton_id)-(long)(p)),105,0,0,-1,-1,-1,1,"parton_id[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdf_id)-(long)(p)),105,0,0,-1,-1,-1,1,"pdf_id[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->scale)-(long)(p)),100,0,0,-1,-1,-1,1,"scale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),100,0,0,-1,-1,-1,1,"x[2]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xf)-(long)(p)),100,0,0,-1,-1,-1,1,"xf[2]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HepMC::GenHeavyIon */
static void G__setup_memvarHepMCcLcLGenHeavyIon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon));
   { HepMC::GenHeavyIon *p; p=(HepMC::GenHeavyIon*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Ncoll_hard)-(long)(p)),105,0,0,-1,-1,-1,1,"Ncoll_hard=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Npart_proj)-(long)(p)),105,0,0,-1,-1,-1,1,"Npart_proj=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Npart_targ)-(long)(p)),105,0,0,-1,-1,-1,1,"Npart_targ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ncoll)-(long)(p)),105,0,0,-1,-1,-1,1,"Ncoll=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->spectator_neutrons)-(long)(p)),105,0,0,-1,-1,-1,1,"spectator_neutrons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->spectator_protons)-(long)(p)),105,0,0,-1,-1,-1,1,"spectator_protons=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->N_Nwounded_collisions)-(long)(p)),105,0,0,-1,-1,-1,1,"N_Nwounded_collisions=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Nwounded_N_collisions)-(long)(p)),105,0,0,-1,-1,-1,1,"Nwounded_N_collisions=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Nwounded_Nwounded_collisions)-(long)(p)),105,0,0,-1,-1,-1,1,"Nwounded_Nwounded_collisions=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->impact_parameter)-(long)(p)),102,0,0,-1,-1,-1,1,"impact_parameter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->event_plane_angle)-(long)(p)),102,0,0,-1,-1,-1,1,"event_plane_angle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eccentricity)-(long)(p)),102,0,0,-1,-1,-1,1,"eccentricity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sigma_inel_NN)-(long)(p)),102,0,0,-1,-1,-1,1,"sigma_inel_NN=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HepMC::GenCrossSection */
static void G__setup_memvarHepMCcLcLGenCrossSection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenCrossSection));
   { HepMC::GenCrossSection *p; p=(HepMC::GenCrossSection*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->cross_section)-(long)(p)),100,0,0,-1,-1,-1,1,"cross_section=",0,"/< Generated cross-section");
   G__memvar_setup((void*)((long)(&p->cross_section_error)-(long)(p)),100,0,0,-1,-1,-1,1,"cross_section_error=",0,"/< Generated cross-section error");
   }
   G__tag_memvar_reset();
}


   /* HepMC::GenEventData */
static void G__setup_memvarHepMCcLcLGenEventData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenEventData));
   { HepMC::GenEventData *p; p=(HepMC::GenEventData*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->event_number)-(long)(p)),105,0,0,-1,-1,-1,1,"event_number=",0,"/< Event number");
   G__memvar_setup((void*)((long)(&p->momentum_unit)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnitscLcLMomentumUnit),-1,-1,1,"momentum_unit=",0,"/< Momentum unit");
   G__memvar_setup((void*)((long)(&p->length_unit)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnitscLcLLengthUnit),-1,-1,1,"length_unit=",0,"/< Length unit");
   G__memvar_setup((void*)((long)(&p->particles)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR),G__defined_typename("vector<GenParticleData>"),-1,1,"particles=",0,"/< Particles");
   G__memvar_setup((void*)((long)(&p->vertices)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR),G__defined_typename("vector<GenVertexData>"),-1,1,"vertices=",0,"/< Vertices");
   G__memvar_setup((void*)((long)(&p->links1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"links1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->links2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"links2=",0,"/< Second id of the vertex links");
   G__memvar_setup((void*)((long)(&p->pdf_info)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo),-1,-1,1,"pdf_info=",0,"/< PDF information");
   G__memvar_setup((void*)((long)(&p->heavy_ion)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon),-1,-1,1,"heavy_ion=",0,"/< Heavy ion additional information");
   G__memvar_setup((void*)((long)(&p->cross_section)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenCrossSection),-1,-1,1,"cross_section=",0,"/< Cross Section additional information");
   }
   G__tag_memvar_reset();
}


   /* vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> > */
static void G__setup_memvarvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   { vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> > *p; p=(vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> > */
static void G__setup_memvarvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   { vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> > *p; p=(vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<int,allocator<int> > */
static void G__setup_memvarvectorlEintcOallocatorlEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   { vector<int,allocator<int> > *p; p=(vector<int,allocator<int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarrootIO_Classes() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHepMCcLcLSetup(void) {
   /* HepMC::Setup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLSetup));
   G__memfunc_setup("Setup",529,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLSetup), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print_errors",1321,G__rootIO_Classes_169_0_2, 103, -1, -1, 0, 0, 3, 1, 0, "", "!< Get error messages printing flag", (void*) G__func2void( (bool (*)())(&HepMC::Setup::print_errors) ), 0);
   G__memfunc_setup("set_print_errors",1748,G__rootIO_Classes_169_0_3, 121, -1, -1, 0, 1, 3, 1, 0, "g - - 0 - flag", "!< Set error messages printing flag", (void*) G__func2void( (void (*)(bool))(&HepMC::Setup::set_print_errors) ), 0);
   G__memfunc_setup("print_warnings",1525,G__rootIO_Classes_169_0_4, 103, -1, -1, 0, 0, 3, 1, 0, "", "!< Get warning messages printing flag", (void*) G__func2void( (bool (*)())(&HepMC::Setup::print_warnings) ), 0);
   G__memfunc_setup("set_print_warnings",1952,G__rootIO_Classes_169_0_5, 121, -1, -1, 0, 1, 3, 1, 0, "g - - 0 - flag", "!< Get warning messages printing flag", (void*) G__func2void( (void (*)(bool))(&HepMC::Setup::set_print_warnings) ), 0);
   G__memfunc_setup("debug_level",1150,G__rootIO_Classes_169_0_6, 105, -1, -1, 0, 0, 3, 1, 0, "", "!< Get debug level", (void*) G__func2void( (int (*)())(&HepMC::Setup::debug_level) ), 0);
   G__memfunc_setup("set_debug_level",1577,G__rootIO_Classes_169_0_7, 121, -1, -1, 0, 1, 3, 1, 0, "i - - 0 - level", "!< Set debug level", (void*) G__func2void( (void (*)(int))(&HepMC::Setup::set_debug_level) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Setup", 529, G__rootIO_Classes_169_0_8, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLSetup), -1, 0, 1, 1, 1, 0, "u 'HepMC::Setup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootIO_Classes_169_0_9, (int) ('u'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLSetup), -1, 1, 1, 1, 1, 0, "u 'HepMC::Setup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHepMCcLcLFourVector(void) {
   /* HepMC::FourVector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector));
   G__memfunc_setup("FourVector",1039,G__rootIO_Classes_170_0_1, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FourVector",1039,G__rootIO_Classes_170_0_2, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector), -1, 0, 4, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z d - - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FourVector",1039,G__rootIO_Classes_170_0_3, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector), -1, 0, 1, 1, 1, 0, "u 'HepMC::FourVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("m",109,G__rootIO_Classes_170_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Calculate mass. Returns -sqrt(-m) if e^2 - P^2 is negative", (void*) NULL, 0);
   G__memfunc_setup("length",642,G__rootIO_Classes_170_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Calculate length", (void*) NULL, 0);
   G__memfunc_setup("is_zero",763,G__rootIO_Classes_170_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", "!< Check if the length of this vertex is equivalent to zero", (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__rootIO_Classes_170_0_7, 103, -1, -1, 0, 1, 1, 1, 8, "u 'HepMC::FourVector' - 11 - rhs", "!< Boolean operator ==", (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__rootIO_Classes_170_0_8, 103, -1, -1, 0, 1, 1, 1, 8, "u 'HepMC::FourVector' - 11 - rhs", "!< Boolean operator !=", (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__rootIO_Classes_170_0_9, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector), -1, 0, 1, 1, 1, 8, "u 'HepMC::FourVector' - 11 - rhs", "!< Arithmetic operator +", (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__rootIO_Classes_170_0_10, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector), -1, 0, 1, 1, 1, 8, "u 'HepMC::FourVector' - 11 - rhs", "!< Arithmetic operator -", (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__rootIO_Classes_170_0_11, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector), -1, 0, 1, 1, 1, 8, "d - - 10 - rhs", "!< Arithmetic operator *", (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__rootIO_Classes_170_0_12, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector), -1, 0, 1, 1, 1, 8, "d - - 10 - rhs", "!< Arithmetic operator /", (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__rootIO_Classes_170_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HepMC::FourVector' - 11 - rhs", "!< Assignment operator +=", (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__rootIO_Classes_170_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HepMC::FourVector' - 11 - rhs", "!< Assignment operator -=", (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__rootIO_Classes_170_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - rhs", "!< Assignment operator *=", (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__rootIO_Classes_170_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 10 - rhs", "!< Assignment operator /=", (void*) NULL, 0);
   G__memfunc_setup("AlmostEqualZero",1544,G__rootIO_Classes_170_0_17, 103, -1, -1, 0, 1, 3, 1, 0, "d - - 0 - A", (char*)NULL, (void*) G__func2void( (bool (*)(double))(&HepMC::FourVector::AlmostEqualZero) ), 0);
   G__memfunc_setup("AlmostEqual2sComplement",2337,G__rootIO_Classes_170_0_18, 103, -1, -1, 0, 3, 3, 1, 0, 
"d - - 0 - A d - - 0 - B "
"h - - 0 'Setup::DEFAULT_DOUBLE_ALMOST_EQUAL_MAXULPS' maxUlps", (char*)NULL, (void*) G__func2void( (bool (*)(double, double, unsigned int))(&HepMC::FourVector::AlmostEqual2sComplement) ), 0);
   G__memfunc_setup("px",232,G__rootIO_Classes_170_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get px", (void*) NULL, 0);
   G__memfunc_setup("setPx",532,G__rootIO_Classes_170_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - px", "!< Set px", (void*) NULL, 0);
   G__memfunc_setup("py",233,G__rootIO_Classes_170_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get py", (void*) NULL, 0);
   G__memfunc_setup("setPy",533,G__rootIO_Classes_170_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - py", "!< Set py", (void*) NULL, 0);
   G__memfunc_setup("pz",234,G__rootIO_Classes_170_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get pz", (void*) NULL, 0);
   G__memfunc_setup("setPz",534,G__rootIO_Classes_170_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - pz", "!< Set pz", (void*) NULL, 0);
   G__memfunc_setup("e",101,G__rootIO_Classes_170_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get energy", (void*) NULL, 0);
   G__memfunc_setup("setE",401,G__rootIO_Classes_170_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - e", "!< Set energy", (void*) NULL, 0);
   G__memfunc_setup("x",120,G__rootIO_Classes_170_0_27, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get x coordinate", (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__rootIO_Classes_170_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - x", "!< Set x coordinate", (void*) NULL, 0);
   G__memfunc_setup("y",121,G__rootIO_Classes_170_0_29, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get y coordinate", (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__rootIO_Classes_170_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - y", "!< Set y coordinate", (void*) NULL, 0);
   G__memfunc_setup("z",122,G__rootIO_Classes_170_0_31, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get z coordinate", (void*) NULL, 0);
   G__memfunc_setup("setZ",422,G__rootIO_Classes_170_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - z", "!< Set z coordinate", (void*) NULL, 0);
   G__memfunc_setup("t",116,G__rootIO_Classes_170_0_33, 100, -1, -1, 0, 0, 1, 1, 8, "", "!< Get time", (void*) NULL, 0);
   G__memfunc_setup("setT",416,G__rootIO_Classes_170_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", "!< Set time", (void*) NULL, 0);
   G__memfunc_setup("set",332,G__rootIO_Classes_170_0_35, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - x1 d - - 0 - x2 "
"d - - 0 - x3 d - - 0 - x4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZERO_VECTOR",882,G__rootIO_Classes_170_0_36, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector), -1, 1, 0, 3, 1, 1, "", "!< FourVector(0,0,0,0)", (void*) G__func2void( (const HepMC::FourVector& (*)())(&HepMC::FourVector::ZERO_VECTOR) ), 0);
   // automatic destructor
   G__memfunc_setup("~FourVector", 1165, G__rootIO_Classes_170_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootIO_Classes_170_0_38, (int) ('u'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLFourVector), -1, 1, 1, 1, 1, 0, "u 'HepMC::FourVector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHepMCcLcLGenParticleData(void) {
   /* HepMC::GenParticleData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData));
   // automatic default constructor
   G__memfunc_setup("GenParticleData", 1480, G__rootIO_Classes_171_0_1, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GenParticleData", 1480, G__rootIO_Classes_171_0_2, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData), -1, 0, 1, 1, 1, 0, "u 'HepMC::GenParticleData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GenParticleData", 1606, G__rootIO_Classes_171_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootIO_Classes_171_0_4, (int) ('u'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData), -1, 1, 1, 1, 1, 0, "u 'HepMC::GenParticleData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHepMCcLcLGenVertexData(void) {
   /* HepMC::GenVertexData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData));
   // automatic default constructor
   G__memfunc_setup("GenVertexData", 1298, G__rootIO_Classes_172_0_1, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GenVertexData", 1298, G__rootIO_Classes_172_0_2, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData), -1, 0, 1, 1, 1, 0, "u 'HepMC::GenVertexData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GenVertexData", 1424, G__rootIO_Classes_172_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootIO_Classes_172_0_4, (int) ('u'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData), -1, 1, 1, 1, 1, 0, "u 'HepMC::GenVertexData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHepMCcLcLUnits(void) {
   /* HepMC::Units */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnits));
   G__memfunc_setup("momentum_unit",1425,G__rootIO_Classes_173_0_1, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnitscLcLMomentumUnit), -1, 0, 1, 3, 1, 0, "u 'string' - 0 - name", (char*)NULL, (void*) G__func2void( (HepMC::Units::MomentumUnit (*)(string))(&HepMC::Units::momentum_unit) ), 0);
   G__memfunc_setup("length_unit",1185,G__rootIO_Classes_173_0_2, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnitscLcLLengthUnit), -1, 0, 1, 3, 1, 0, "u 'string' - 0 - name", (char*)NULL, (void*) G__func2void( (HepMC::Units::LengthUnit (*)(string))(&HepMC::Units::length_unit) ), 0);
   G__memfunc_setup("name",417,G__rootIO_Classes_173_0_3, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_string), -1, 0, 1, 3, 1, 0, "i 'HepMC::Units::MomentumUnit' - 0 - u", (char*)NULL, (void*) G__func2void( (string (*)(HepMC::Units::MomentumUnit))(&HepMC::Units::name) ), 0);
   G__memfunc_setup("name",417,G__rootIO_Classes_173_0_4, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_string), -1, 0, 1, 3, 1, 0, "i 'HepMC::Units::LengthUnit' - 0 - u", (char*)NULL, (void*) G__func2void( (string (*)(HepMC::Units::LengthUnit))(&HepMC::Units::name) ), 0);
   G__memfunc_setup("convert",769,G__rootIO_Classes_173_0_5, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'HepMC::FourVector' - 1 - m i 'HepMC::Units::MomentumUnit' - 0 - from "
"i 'HepMC::Units::MomentumUnit' - 0 - to", (char*)NULL, (void*) G__func2void( (void (*)(HepMC::FourVector&, HepMC::Units::MomentumUnit, HepMC::Units::MomentumUnit))(&HepMC::Units::convert) ), 0);
   G__memfunc_setup("convert",769,G__rootIO_Classes_173_0_6, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'HepMC::FourVector' - 1 - m i 'HepMC::Units::LengthUnit' - 0 - from "
"i 'HepMC::Units::LengthUnit' - 0 - to", (char*)NULL, (void*) G__func2void( (void (*)(HepMC::FourVector&, HepMC::Units::LengthUnit, HepMC::Units::LengthUnit))(&HepMC::Units::convert) ), 0);
   // automatic default constructor
   G__memfunc_setup("Units", 531, G__rootIO_Classes_173_0_7, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnits), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Units", 531, G__rootIO_Classes_173_0_8, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnits), -1, 0, 1, 1, 1, 0, "u 'HepMC::Units' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Units", 657, G__rootIO_Classes_173_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootIO_Classes_173_0_10, (int) ('u'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLUnits), -1, 1, 1, 1, 1, 0, "u 'HepMC::Units' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHepMCcLcLGenPdfInfo(void) {
   /* HepMC::GenPdfInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo));
   G__memfunc_setup("set",332,G__rootIO_Classes_176_0_1, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - - 0 - parton_id1 i - - 0 - parton_id2 "
"d - - 0 - x1 d - - 0 - x2 "
"d - - 0 - scale_in d - - 0 - xf1 "
"d - - 0 - xf2 i - - 0 '0' pdf_id1 "
"i - - 0 '0' pdf_id2", "/< Set all fields", (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__rootIO_Classes_176_0_2, 103, -1, -1, 0, 1, 1, 1, 8, "u 'HepMC::GenPdfInfo' - 11 - -", "/< Operator ==", (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__rootIO_Classes_176_0_3, 103, -1, -1, 0, 1, 1, 1, 8, "u 'HepMC::GenPdfInfo' - 11 - -", "/< Operator !=", (void*) NULL, 0);
   G__memfunc_setup("is_valid",843,G__rootIO_Classes_176_0_4, 103, -1, -1, 0, 0, 1, 1, 8, "", "/< Verify that the instance contains non-zero information", (void*) NULL, 0);
   G__memfunc_setup("print",557,G__rootIO_Classes_176_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' ostr", "/< Print the contents to output stream", (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("GenPdfInfo", 960, G__rootIO_Classes_176_0_6, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GenPdfInfo", 960, G__rootIO_Classes_176_0_7, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo), -1, 0, 1, 1, 1, 0, "u 'HepMC::GenPdfInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GenPdfInfo", 1086, G__rootIO_Classes_176_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootIO_Classes_176_0_9, (int) ('u'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo), -1, 1, 1, 1, 1, 0, "u 'HepMC::GenPdfInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHepMCcLcLGenHeavyIon(void) {
   /* HepMC::GenHeavyIon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon));
   G__memfunc_setup("set",332,G__rootIO_Classes_177_0_1, 121, -1, -1, 0, 13, 1, 1, 0, 
"i - - 0 - nh i - - 0 - np "
"i - - 0 - nt i - - 0 - nc "
"i - - 0 - ns i - - 0 - nsp "
"i - - 0 '0' nnw i - - 0 '0' nwn "
"i - - 0 '0' nwnw f - - 0 '0.' im "
"f - - 0 '0.' pl f - - 0 '0.' ec "
"f - - 0 '0.' s", "/< Set all fields", (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__rootIO_Classes_177_0_2, 103, -1, -1, 0, 1, 1, 1, 8, "u 'HepMC::GenHeavyIon' - 11 - -", "/< Operator ==", (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__rootIO_Classes_177_0_3, 103, -1, -1, 0, 1, 1, 1, 8, "u 'HepMC::GenHeavyIon' - 11 - -", "/< Operator !=", (void*) NULL, 0);
   G__memfunc_setup("is_valid",843,G__rootIO_Classes_177_0_4, 103, -1, -1, 0, 0, 1, 1, 8, "", "/< Verify that the instance contains non-zero information", (void*) NULL, 0);
   G__memfunc_setup("print",557,G__rootIO_Classes_177_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' ostr", "/< Print the contents to output stream", (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("GenHeavyIon", 1085, G__rootIO_Classes_177_0_6, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GenHeavyIon", 1085, G__rootIO_Classes_177_0_7, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon), -1, 0, 1, 1, 1, 0, "u 'HepMC::GenHeavyIon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GenHeavyIon", 1211, G__rootIO_Classes_177_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootIO_Classes_177_0_9, (int) ('u'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon), -1, 1, 1, 1, 1, 0, "u 'HepMC::GenHeavyIon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHepMCcLcLGenCrossSection(void) {
   /* HepMC::GenCrossSection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenCrossSection));
   G__memfunc_setup("set_cross_section",1833,G__rootIO_Classes_178_0_1, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - xs d - - 0 - xs_err", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__rootIO_Classes_178_0_2, 103, -1, -1, 0, 1, 1, 1, 8, "u 'HepMC::GenCrossSection' - 11 - -", "/< Operator ==", (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__rootIO_Classes_178_0_3, 103, -1, -1, 0, 1, 1, 1, 8, "u 'HepMC::GenCrossSection' - 11 - -", "/< Operator !=", (void*) NULL, 0);
   G__memfunc_setup("is_valid",843,G__rootIO_Classes_178_0_4, 103, -1, -1, 0, 0, 1, 1, 8, "", "/< Verify that the instance contains non-zero information", (void*) NULL, 0);
   G__memfunc_setup("print",557,G__rootIO_Classes_178_0_5, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 'std::cout' ostr", "/< Print the contents to output stream", (void*) NULL, 0);
   // automatic default constructor
   G__memfunc_setup("GenCrossSection", 1529, G__rootIO_Classes_178_0_6, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenCrossSection), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GenCrossSection", 1529, G__rootIO_Classes_178_0_7, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenCrossSection), -1, 0, 1, 1, 1, 0, "u 'HepMC::GenCrossSection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GenCrossSection", 1655, G__rootIO_Classes_178_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootIO_Classes_178_0_9, (int) ('u'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenCrossSection), -1, 1, 1, 1, 1, 0, "u 'HepMC::GenCrossSection' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHepMCcLcLGenEventData(void) {
   /* HepMC::GenEventData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenEventData));
   // automatic default constructor
   G__memfunc_setup("GenEventData", 1174, G__rootIO_Classes_179_0_1, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenEventData), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GenEventData", 1174, G__rootIO_Classes_179_0_2, (int) ('i'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenEventData), -1, 0, 1, 1, 1, 0, "u 'HepMC::GenEventData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GenEventData", 1300, G__rootIO_Classes_179_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__rootIO_Classes_179_0_4, (int) ('u'), G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenEventData), -1, 1, 1, 1, 1, 0, "u 'HepMC::GenEventData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR(void) {
   /* vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR));
   G__memfunc_setup("at",213,G__rootIO_Classes_181_0_1, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData), G__defined_typename("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__rootIO_Classes_181_0_2, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData), G__defined_typename("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__rootIO_Classes_181_0_3, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__rootIO_Classes_181_0_4, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__rootIO_Classes_181_0_5, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiteratorgR), G__defined_typename("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__rootIO_Classes_181_0_6, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiteratorgR), G__defined_typename("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__rootIO_Classes_181_0_7, 107, -1, G__defined_typename("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__rootIO_Classes_181_0_8, 107, -1, G__defined_typename("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__rootIO_Classes_181_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__rootIO_Classes_181_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type' 0 - sz u 'HepMC::GenParticleData' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__rootIO_Classes_181_0_11, 107, -1, G__defined_typename("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__rootIO_Classes_181_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__rootIO_Classes_181_0_13, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData), G__defined_typename("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__rootIO_Classes_181_0_14, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData), G__defined_typename("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >",5990,G__rootIO_Classes_181_0_15, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >",5990,G__rootIO_Classes_181_0_16, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type' 0 - n u 'HepMC::GenParticleData' - 11 'HepMC::GenParticleData()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >",5990,G__rootIO_Classes_181_0_17, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >",5990,G__rootIO_Classes_181_0_18, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator' 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_iterator' 10 - first u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator' 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__rootIO_Classes_181_0_19, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__rootIO_Classes_181_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__rootIO_Classes_181_0_21, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__rootIO_Classes_181_0_22, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__rootIO_Classes_181_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HepMC::GenParticleData' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__rootIO_Classes_181_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__rootIO_Classes_181_0_25, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator' - 0 - position u 'HepMC::GenParticleData' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__rootIO_Classes_181_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator' - 0 - position u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator' 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_iterator' 10 - first "
"u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator' 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__rootIO_Classes_181_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator' - 0 - position k - 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::size_type' 0 - n "
"u 'HepMC::GenParticleData' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__rootIO_Classes_181_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__rootIO_Classes_181_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__rootIO_Classes_181_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator' - 0 - first u 'vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__rootIO_Classes_181_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >", 6116, G__rootIO_Classes_181_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR(void) {
   /* vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR));
   G__memfunc_setup("at",213,G__rootIO_Classes_185_0_1, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData), G__defined_typename("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__rootIO_Classes_185_0_2, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData), G__defined_typename("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__rootIO_Classes_185_0_3, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__rootIO_Classes_185_0_4, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__rootIO_Classes_185_0_5, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiteratorgR), G__defined_typename("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__rootIO_Classes_185_0_6, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiteratorgR), G__defined_typename("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__rootIO_Classes_185_0_7, 107, -1, G__defined_typename("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__rootIO_Classes_185_0_8, 107, -1, G__defined_typename("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__rootIO_Classes_185_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__rootIO_Classes_185_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type' 0 - sz u 'HepMC::GenVertexData' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__rootIO_Classes_185_0_11, 107, -1, G__defined_typename("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__rootIO_Classes_185_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__rootIO_Classes_185_0_13, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData), G__defined_typename("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__rootIO_Classes_185_0_14, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData), G__defined_typename("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >",5626,G__rootIO_Classes_185_0_15, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >",5626,G__rootIO_Classes_185_0_16, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type' 0 - n u 'HepMC::GenVertexData' - 11 'HepMC::GenVertexData()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >",5626,G__rootIO_Classes_185_0_17, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >",5626,G__rootIO_Classes_185_0_18, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator' 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_iterator' 10 - first u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator' 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__rootIO_Classes_185_0_19, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__rootIO_Classes_185_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__rootIO_Classes_185_0_21, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__rootIO_Classes_185_0_22, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__rootIO_Classes_185_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HepMC::GenVertexData' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__rootIO_Classes_185_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__rootIO_Classes_185_0_25, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator' - 0 - position u 'HepMC::GenVertexData' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__rootIO_Classes_185_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator' - 0 - position u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator' 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_iterator' 10 - first "
"u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator' 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__rootIO_Classes_185_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator' - 0 - position k - 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::size_type' 0 - n "
"u 'HepMC::GenVertexData' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__rootIO_Classes_185_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__rootIO_Classes_185_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__rootIO_Classes_185_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator' - 0 - first u 'vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__rootIO_Classes_185_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >", 5752, G__rootIO_Classes_185_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR(void) {
   /* vector<int,allocator<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR));
   G__memfunc_setup("at",213,G__rootIO_Classes_189_0_1, 105, -1, G__defined_typename("vector<int,allocator<int> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__rootIO_Classes_189_0_2, 105, -1, G__defined_typename("vector<int,allocator<int> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__rootIO_Classes_189_0_3, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__rootIO_Classes_189_0_4, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__rootIO_Classes_189_0_5, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR), G__defined_typename("vector<int,allocator<int> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__rootIO_Classes_189_0_6, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR), G__defined_typename("vector<int,allocator<int> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__rootIO_Classes_189_0_7, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__rootIO_Classes_189_0_8, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__rootIO_Classes_189_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__rootIO_Classes_189_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<int,allocator<int> >::size_type' 0 - sz i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__rootIO_Classes_189_0_11, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__rootIO_Classes_189_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__rootIO_Classes_189_0_13, 105, -1, G__defined_typename("vector<int,allocator<int> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__rootIO_Classes_189_0_14, 105, -1, G__defined_typename("vector<int,allocator<int> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__rootIO_Classes_189_0_15, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__rootIO_Classes_189_0_16, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<int,allocator<int> >::size_type' 0 - n i - - 11 'int()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__rootIO_Classes_189_0_17, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__rootIO_Classes_189_0_18, 105, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - first u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__rootIO_Classes_189_0_19, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__rootIO_Classes_189_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__rootIO_Classes_189_0_21, 105, -1, -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__rootIO_Classes_189_0_22, 105, -1, -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__rootIO_Classes_189_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__rootIO_Classes_189_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__rootIO_Classes_189_0_25, 117, G__get_linked_tagnum(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__rootIO_Classes_189_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - first "
"u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__rootIO_Classes_189_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position k - 'vector<int,allocator<int> >::size_type' 0 - n "
"i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__rootIO_Classes_189_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__rootIO_Classes_189_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__rootIO_Classes_189_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - first u 'vector<int,allocator<int> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__rootIO_Classes_189_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<int,allocator<int> >", 2728, G__rootIO_Classes_189_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncrootIO_Classes() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalrootIO_Classes() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcrootIO_Classes() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__rootIO_ClassesLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMC = { "HepMC" , 110 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLSetup = { "HepMC::Setup" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLFourVector = { "HepMC::FourVector" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLGenParticleData = { "HepMC::GenParticleData" , 115 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLGenVertexData = { "HepMC::GenVertexData" , 115 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLUnits = { "HepMC::Units" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLUnitscLcLMomentumUnit = { "HepMC::Units::MomentumUnit" , 101 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLUnitscLcLLengthUnit = { "HepMC::Units::LengthUnit" , 101 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo = { "HepMC::GenPdfInfo" , 115 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon = { "HepMC::GenHeavyIon" , 115 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLGenCrossSection = { "HepMC::GenCrossSection" , 115 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_HepMCcLcLGenEventData = { "HepMC::GenEventData" , 115 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR = { "vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiterator = { "vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >::iterator>" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR = { "vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiterator = { "vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >::iterator>" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator = { "vector<int,allocator<int> >::iterator" , 99 , -1 };
G__linked_taginfo G__rootIO_ClassesLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablerootIO_Classes() {
  G__rootIO_ClassesLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__rootIO_ClassesLN_string.tagnum = -1 ;
  G__rootIO_ClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__rootIO_ClassesLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__rootIO_ClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__rootIO_ClassesLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMC.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLSetup.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLFourVector.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLGenParticleData.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLGenVertexData.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLUnits.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLUnitscLcLMomentumUnit.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLUnitscLcLLengthUnit.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLGenCrossSection.tagnum = -1 ;
  G__rootIO_ClassesLN_HepMCcLcLGenEventData.tagnum = -1 ;
  G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR.tagnum = -1 ;
  G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiterator.tagnum = -1 ;
  G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR.tagnum = -1 ;
  G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiterator.tagnum = -1 ;
  G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator.tagnum = -1 ;
  G__rootIO_ClassesLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablerootIO_Classes() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_string);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLSetup),sizeof(HepMC::Setup),-1,263424,(char*)NULL,G__setup_memvarHepMCcLcLSetup,G__setup_memfuncHepMCcLcLSetup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLFourVector),sizeof(HepMC::FourVector),-1,295680,(char*)NULL,G__setup_memvarHepMCcLcLFourVector,G__setup_memfuncHepMCcLcLFourVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLGenParticleData),sizeof(HepMC::GenParticleData),-1,262144,(char*)NULL,G__setup_memvarHepMCcLcLGenParticleData,G__setup_memfuncHepMCcLcLGenParticleData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLGenVertexData),sizeof(HepMC::GenVertexData),-1,262144,(char*)NULL,G__setup_memvarHepMCcLcLGenVertexData,G__setup_memfuncHepMCcLcLGenVertexData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLUnits),sizeof(HepMC::Units),-1,262144,(char*)NULL,G__setup_memvarHepMCcLcLUnits,G__setup_memfuncHepMCcLcLUnits);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLUnitscLcLMomentumUnit);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLUnitscLcLLengthUnit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLGenPdfInfo),sizeof(HepMC::GenPdfInfo),-1,262144,(char*)NULL,G__setup_memvarHepMCcLcLGenPdfInfo,G__setup_memfuncHepMCcLcLGenPdfInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLGenHeavyIon),sizeof(HepMC::GenHeavyIon),-1,262144,(char*)NULL,G__setup_memvarHepMCcLcLGenHeavyIon,G__setup_memfuncHepMCcLcLGenHeavyIon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLGenCrossSection),sizeof(HepMC::GenCrossSection),-1,262144,(char*)NULL,G__setup_memvarHepMCcLcLGenCrossSection,G__setup_memfuncHepMCcLcLGenCrossSection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_HepMCcLcLGenEventData),sizeof(HepMC::GenEventData),-1,262144,(char*)NULL,G__setup_memvarHepMCcLcLGenEventData,G__setup_memfuncHepMCcLcLGenEventData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR),sizeof(vector<HepMC::GenParticleData,allocator<HepMC::GenParticleData> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR,G__setup_memfuncvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgR);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenParticleDatacOallocatorlEHepMCcLcLGenParticleDatagRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR),sizeof(vector<HepMC::GenVertexData,allocator<HepMC::GenVertexData> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR,G__setup_memfuncvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgR);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_vectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEHepMCcLcLGenVertexDatacOallocatorlEHepMCcLcLGenVertexDatagRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgR),sizeof(vector<int,allocator<int> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEintcOallocatorlEintgRsPgR,G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__rootIO_ClassesLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setuprootIO_Classes(void) {
  G__check_setup_version(30051515,"G__cpp_setuprootIO_Classes()");
  G__set_cpp_environmentrootIO_Classes();
  G__cpp_setup_tagtablerootIO_Classes();

  G__cpp_setup_inheritancerootIO_Classes();

  G__cpp_setup_typetablerootIO_Classes();

  G__cpp_setup_memvarrootIO_Classes();

  G__cpp_setup_memfuncrootIO_Classes();
  G__cpp_setup_globalrootIO_Classes();
  G__cpp_setup_funcrootIO_Classes();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncrootIO_Classes();
  return;
}
class G__cpp_setup_initrootIO_Classes {
  public:
    G__cpp_setup_initrootIO_Classes() { G__add_setup_func("rootIO_Classes",(G__incsetup)(&G__cpp_setuprootIO_Classes)); G__call_setup_funcs(); }
   ~G__cpp_setup_initrootIO_Classes() { G__remove_setup_func("rootIO_Classes"); }
};
G__cpp_setup_initrootIO_Classes G__cpp_setup_initializerrootIO_Classes;

