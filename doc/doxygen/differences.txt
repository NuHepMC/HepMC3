/**
    @page differences Differences between HepMC2 and HepMC3

    The following is a list of main differences that should be taken into
    account when transitioning from HepMC2 to HepMC3.

    ###########################################################################
    @section technical Technical changes
    ###########################################################################
    ###########################################################################
    @subsection structure Structure change and header file organization
    ###########################################################################

    Following changes in header files have been applied:
    @code{.cpp}
        HepMC/IO_GenEvent.h  ->  HepMC/IO/IO_GenEvent.h
        HepMC/HeavyIons.h    ->  HepMC/GenHeavyIons.h   (now a POD struct)
        HepMC/PdfInfo.h      ->  HepMC/GenPdfInfo.h     (now a POD struct)
        HepMC/SimpleVector.h ->  HepMC/FourVector.h     (ThreeVector class removed)
    @endcode

    Following header files are no longer available:

    @code{.cpp}
        CompareGenEvent.h
        Flow.h
        GenRanges.h
        HepMCDefs.h
        HerwigWrapper.h
        IteratorRange.h
        Polarization.h
        SearchVector.h
        StreamHelpers.h
        StreamInfo.h
        TempParticleMap.h
        WeightContainer.h

        enable_if.h
        is_arithmetic.h

        IO_AsciiParticles.h
        IO_Exception.h
        IO_HEPEVT.h
        IO_HERWIG.h

        PythiaWrapper.h
        PythiaWrapper6_4.h
        PythiaWrapper6_4_WIN32.h
    @endcode

    ###########################################################################
    @subsection memory Memory managed by shared pointers
    ###########################################################################
    Particles and vertices are managed using shared pointers,
    so they cannot be created through the call to 'new'.

    @code{.cpp}
        GenEvent event;

        // Create particles
        GenParticlePtr p1 = make_shared<GenParticle>();
        GenParticlePtr p2 = make_shared<GenParticle>();
        GenParticlePtr p3 = make_shared<GenParticle>();

        p1->set_pdg_id(23);
        p2->set_pdg_id(15);
        p3->set_pdg_id(-15);

        // Create vertex
        GenVertexPtr v1 = make_shared<GenVertex>();
        v1->add_particle_in(p1);
        v1->add_particle_out(p2);
        v1->add_particle_out(p3);

        event.add_vertex(v1);
    @endcode

    @note An interface to convert raw pointers to GenParticlePtr, GenVertexPtr
          is available for backward-compatibility. It is marked as deprecated.

    ###########################################################################
    @subsection topological_order Topological order
    ###########################################################################

    Particles and vertices in HepMC3 are stored in topological order. This means
    that when creating vertices, incoming particles must have barcode lower than
    any of the outgoing particles.

    This forces the tree structure to be constructed top-to-bottom
    and disallows creating loops.

    @code{.cpp}
        GenParticlePtr p1 = make_shared<GenParticle>();
        GenParticlePtr p2 = make_shared<GenParticle>();
        GenParticlePtr p3 = make_shared<GenParticle>();
        GenParticlePtr p4 = make_shared<GenParticle>();

        GenVertexPtr v1 = make_shared<GenVertex>();
        GenVertexPtr v2 = make_shared<GenVertex>();
        GenVertexPtr v3 = make_shared<GenVertex>();

        event.add_particle(p1);
        event.add_particle(p2);
        event.add_particle(p3);
        event.add_particle(p4);
        event.add_vertex(v1);
        event.add_vertex(v2);
        event.add_vertex(v3);

        v1->add_particle_in (p2);
        v1->add_particle_out(p3);
        v1->add_particle_in (p4); // will cause error, because p3
                                  // has higher index than p4

        v2->add_particle_in (p4);
        v2->add_particle_out(p3); // will also cause error

        // Order of vertices does not matter. Index of end vertex
        // can be lower than index of production vertex
        v3->add_particle_in (p1);
        v3->add_particle_out(p2);
    @endcode

    ###########################################################################
    @section interface Changes to user interface
    ###########################################################################
    ###########################################################################
    @subsection deleting Removed function GenEvent::remove_particle()
    ###########################################################################

    @warning For now, there is no option to delete a particle!

    ###########################################################################
    @subsection barcodes Barcodes can no longer be set
    ###########################################################################

    Barcodes are now solely for backward-compatibility purpose.
    To code information that previously was stored as barcode use
    HepMC3::GenParticle::set_status_subcode()

    @note This will be replaced in future with more complex option of defining user code

    ###########################################################################
    @subsection units Units are no longer defined at compilation time
    ###########################################################################

    Units has to be always provided when creating new event.
    They can be later changed using HepMC::GenEvent::set_units

    @code{.cpp}
        GenEvent event(Units::GEV,Units::CM);

        GenParticlePtr p = make_shared<GenParticle>();

        event.add_particle(p);
        ...

        event.print(); // event printed in GEV/CM

        event.set_units(Units::MEV,Units::MM); // will trigger unit conversion for all particles and vertices

        event.print(); // event printed in MEV/MM
    @endcode

    <hr>
    Last update 6 November 2014
*/
