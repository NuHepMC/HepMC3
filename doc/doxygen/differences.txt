/**
    @page differences Differences between HepMC2 and HepMC3

    The following is a list of main differences that should be taken into
    account when transitioning from HepMC2 to HepMC3.

    ###########################################################################
    @section technical Technical changes
    ###########################################################################
    ###########################################################################
    @subsection memory GenEvent manages memory of particles and vertices
    ###########################################################################
    Particles and vertices can no longer be created standalone. They have to
    be created using methods form GenEvent class. They have no public
    constructor, so they cannot be created through the call to 'new'.

    @code{.cpp}
        GenEvent event;

        // Create particles
        // These particles will already be part of the event
        // They don't have to be added to the event
        GenParticle &p1 = event.new_particle();
        GenParticle &p2 = event.new_particle();
        GenParticle &p3 = event.new_particle();

        p1.set_pdg_id(23);
        p2.set_pdg_id(15);
        p3.set_pdg_id(-15);

        // Create vertex
        GenVertex   &v1 = event.new_vertex();
        v1.add_particle_in(p1);
        v1.add_particle_out(p2);
        v1.add_particle_out(p3);

        GenParticle *p4 = new GenParticle(); // Will fail at compile time. No public constructor
        GenParticle  p5;                     // Will fail for the same reason
    @endcode

    ###########################################################################
    @subsection topological_order Topological order
    ###########################################################################

    Particles and vertices in HepMC3 are stored in topological order. This means
    that when creating vertices, incoming particles must have barcode lower than
    any of the outgoing particles.

    This forces the tree structure to be constructed top-to-bottom
    and disallows creating loops.

    @code{.cpp}
        GenParticle &p1 = event.new_particle();
        GenParticle &p2 = event.new_particle();
        GenParticle &p3 = event.new_particle();
        GenParticle &p4 = event.new_particle();

        GenVertex   &v1 = event.new_vertex();
        GenVertex   &v2 = event.new_vertex();
        GenVertex   &v3 = event.new_vertex();

        v1.add_particle_in (p2);
        v1.add_particle_out(p3);
        v1.add_particle_in (p4);  // will cause error, because p3 was created after p2

        v2.add_particle_in (p4);
        v2.add_particle_out(p3);  // will also cause error

        // Order of vertices does not matter. Barcode of end vertex
        // can be lower than barcode of production vertex
        v3.add_particle_in (p1);
        v3.add_particle_out(p2);
    @endcode

    ###########################################################################
    @section interface Changes to user interface
    ###########################################################################
    ###########################################################################
    @subsection deleting Removed function GenEvent::remove_particle()
    ###########################################################################

    Function GenEvent::remove_particle() has been replaced by
    HepMC3::GenEvent::delete_particle() with a different role
    than previous function. Versioning scheme requires that deleting a particle
    or vertex only tags it as being deleted without actually deleting its data.
    See \ref versioning for a description on how to use deleted particles or
    vertices or how to delete them permanently.

    @code{.cpp}
        GenParticle &p = event.new_particle();

        event.delete_particle(p); // tags particle as deleted

        cout<<p.generated_mass()<<endl; // still valid as the reference is valid

        p.set_generated_mass(777.0); // will throw a warning because particle
                                     // is marked as deleted
    @endcode

    ###########################################################################
    @subsection barcodes Barcodes can no longer be set
    ###########################################################################

    Barcodes are now solely for internal use. To code information that
    previously was stored as barcode use HepMC3::GenParticle::set_status_subcode()

    @code{.cpp}
        GenParticle &p = event.new_particle();

        cout<<p.barcode()<<endl; // will print out '1'

        // no GenParticle::set_barcode function use subcode instead
        p.set_status_subcode(10001);
    @endcode

    <hr>
    Last update 16 April 2014
*/
